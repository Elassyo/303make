#!/usr/bin/env python

import sys
from Element import Element


def get_files(line):
    all = set(filter(lambda x: x, [e.strip() for e in line.replace(":", " ").split()]))
    return all


def parse_file(file_name):
    elems = []
    files = set()
    clines = []
    f = open(file_name, "r")
    for line in f.readlines():
        line = line.strip()
        if not line:
            continue
        if ":" in line:
            files = files.union(get_files(line))
            elems.append(Element(line))
        else:
            elems[-1].cline = line
            clines.append(line.split())
    return elems, list(files), clines


def build_array(elems, files):
    array = []
    for file in files:
        if file not in elems:
            array.append([0 for _ in range(0, len(files))])
        else:
            elem = elems[elems.index(file)]
            array.append([elem.is_dep(f) for f in files])
    return array


def find_res(i, array, files):
    for j, res in enumerate(files):
        if array[j][i] == 1:
            print(" -> " + files[j], end="")
            find_res(j, array, files)

def print_all(array, elems, files):
    print("\n".join("[" + " ".join(map(lambda x: str(x), a)) + "]" for a in array) + "\n")
    for i, file in enumerate(files):
        for j, res in enumerate(files):
            if array[j][i] == 1:
                print(files[i], end=" -> ")
                print(files[j], end="")
                find_res(j, array, files)
                print()


def get_cline(file, elems):
    to_ret = set()
    for elem in elems:
        if elem == file or elem.is_dep(file):
            to_ret.add(elem.cline)
    return to_ret


def find_clines(i, array, files, elems):
    to_ret = set()
    for j, res in enumerate(files):
        if array[j][i] == 1:
            to_ret = to_ret.union(get_cline(files[j], elems))
            to_ret = to_ret.union(find_clines(j, array, files, elems))
    return to_ret


def print_clines(array, file, files, elems):
    i = files.index(file)
    to_print = set()
    for j, res in enumerate(files):
        if array[j][i] == 1:
            to_print = to_print.union(get_cline(files[i], elems))
            to_print = to_print.union(find_clines(j, array, files, elems))
    print("\n".join(sorted(list(to_print))))


def main(args):
    if len(args) == 1:
        elems, files, _ = parse_file(args[0])
        files.sort()
        array = build_array(elems, files)
        print_all(array, elems, files)
    elif len(args) == 2:
        elems, files, clines = parse_file(args[0])
        array = build_array(elems, files)
        print_clines(array, args[1], files, elems)
    else:
        sys.exit(84)


if __name__ == "__main__":
    main(sys.argv[1:])
